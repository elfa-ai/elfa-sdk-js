name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 2.0.1)'
        required: true
        type: string

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run full test suite
        run: |
          npm run typecheck
          npm run lint
          npm test
          npm run build
          
      - name: Validate version
        if: github.event.inputs.version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          INPUT_VERSION="${{ github.event.inputs.version }}"
          if [ "$PACKAGE_VERSION" != "$INPUT_VERSION" ]; then
            echo "❌ Version mismatch: package.json has $PACKAGE_VERSION but input is $INPUT_VERSION"
            exit 1
          fi
          echo "✅ Version validation passed"

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: validate
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build package
        run: npm run build
        
      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Configure npm
          npm config set //registry.npmjs.org/:_authToken $NODE_AUTH_TOKEN
          
          # Publish package
          npm publish --access public
          
          echo "✅ Package published successfully"
          
      - name: Get package info
        id: package
        run: |
          echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, publish]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for changelog
          
      - name: Get package info
        id: package
        run: |
          echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          
      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          CURRENT_TAG="v${{ steps.package.outputs.version }}"
          
          echo "## Changes" > CHANGELOG.md
          
          if [ -n "$PREV_TAG" ]; then
            echo "" >> CHANGELOG.md
            git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> CHANGELOG.md
          else
            echo "- Initial release" >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "## Installation" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo '```bash' >> CHANGELOG.md
          echo "npm install ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }}" >> CHANGELOG.md
          echo '```' >> CHANGELOG.md
          
          # Output for GitHub release
          cat CHANGELOG.md >> $GITHUB_STEP_SUMMARY
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package.outputs.version }}
          release_name: Release v${{ steps.package.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [validate, publish, create-release]
    if: success()
    
    steps:
      - name: Get package info
        id: package
        run: |
          echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          
      - name: Notify success
        run: |
          echo "🎉 Successfully released ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }}"
          echo "📦 NPM: https://www.npmjs.com/package/${{ steps.package.outputs.name }}"
          echo "🏷️ GitHub: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.package.outputs.version }}"